package com.example.diploma_mk

//Вместо цифр и букывык прописываешь текст который будет
//Когда будет текст то помогу с отступами и всей херней
val topicKotlin_1_1 ="\t\tКотлин - это язык программирования, который был создан компанией JetBrains в 2011 году. Он является статически типизированным языком, который работает на платформе Java Virtual Machine (JVM). Kotlin был создан для упрощения разработки приложений и улучшения производительности."
val topicKotlin_1_2 = "<br/><br/>Одной из главных особенностей Kotlin является его безопасность. Kotlin предоставляет множество инструментов для предотвращения ошибок во время компиляции, таких как проверка на нулевое значение и безопасное приведение типов. Это позволяет разработчикам создавать более надежные приложения.\n" +
        "<br/><br/>Кроме того, Kotlin имеет простой и понятный синтаксис, который делает его более доступным для новичков в программировании. Он также поддерживает функциональное программирование, что позволяет создавать более гибкий и масштабируемый код.\n" +
        "<br/><br/>Kotlin также имеет отличную интеграцию с Java, что позволяет использовать существующий Java-код в Kotlin-проектах и наоборот. Это делает Kotlin идеальным выбором для разработки приложений на платформе Android.\n" +
        "<br/><br/>В этом курсе мы будем изучать основы Kotlin, включая переменные, типы данных, операторы, функции, классы и объекты. Мы также рассмотрим некоторые продвинутые темы, такие как функциональное программирование, лямбда-выражения и корутины.\n"
val topicKotlin_1_3 = "<br/><br/>Я уверен, что вы будете наслаждаться изучением Kotlin и сможете создавать качественные приложения с помощью этого языка программирования."

val topicKotlin_2_1 ="<b>\t\tПрограмма</b> — это набор (список) команд. Сначала выполняется первая команда, затем вторая, третья, и так далее. Когда все команды выполнены, программа завершается.\n" +
        "\n" +
        "<br/><br/>Какие именно команды могут быть в списке зависит от того, <b>кто их выполняет</b>: какие команды знает (и понимает) исполнитель. Собаке можно дать команду «Сидеть», «Голос», кошке — «Брысь», человеку — «Стой! Стрелять буду!», ну а роботу — «Работай! Работай, твою робомать».\n" +
        "\n" +
        "<br/><br/>Программы, написанные на языке Kotlin, исполняет <b>JVM</b> (Java Virtual Machine — <b>виртуальная машина Java</b>). Kotlin полностью совместим с Java, потому что запускается на его виртуальной машине (JVM).\n" +
        "\n" +
        "<br/><br/>JVM — это специальная программа, которая умеет исполнять программы, написанные на языке Java.\n" +
        "Список ее команд довольно обширен.\n" +
        "\n" +
        "Например, этой <b>командой</b> можно вывести на экран надпись: <b>“Робот — друг человека”</b>:\n"
val topicKotlin_2_2 ="Но мы начнем не с команд, а с пары простых принципов. Знание нескольких принципов заменяет знание многих фактов.\n" +
        "<br/><br/><b>Принцип первый</b>: в языке программирования Kotlin каждую команду принято писать <b>с новой строки</b>.\n" +
        "<br/><br/>Допустим, мы хотим 3 раза вывести на экран надпись: “Робот — друг человека”. Вот как будет выглядеть код программы:\n"
val topicKotlin_2_3 ="<b>Принцип второй</b>: программа не может просто состоять из команд. Команды языка Kotlin должны находиться внутри функций, а функции — внутри классов.\n" +
        "\n" +
        "<br/><br/>Представьте себе диван. Диван не может быть сам по себе — он находится в какой-то комнате. Комната тоже не может существовать сама по себе — она находится в каком-то доме. Или же можно сказать, что дом делится на комнаты, а комнаты содержат вещи.\n" +
        "\n" +
        "<br/><br/>Так вот, команды — это мебель. В языке программирования Kotlin команда не может быть сама по себе: она — часть функции (функции в Kotlin еще называют методами). А <b>метод</b> (функция) — это часть <b>класса</b>. Иными словами, класс делится на методы, а методы содержат команды.\n" +
        "\n" +
        "<br/><br/>Kotlin-программы состоят из классов, классы содержат методы, а методы — команды.\n"

val topicKotlin_3_1 ="\t\tПрограммы на языке <b>Kotlin</b> состоят из <b>классов</b>. Классов может быть десятки тысяч. Минимальная программа — один класс. Для каждого класса заводится отдельный файл, имя которого совпадает с именем класса.\n" +
        "\n" +
        "<br/><br/>Программы на языке Kotlin состоят из классов. Классов может быть десятки тысяч. Минимальная программа — один класс. Для каждого класса заводится отдельный файл, имя которого совпадает с именем класса.\n" +
        "\n" +
        "<br/><br/>Допустим, вы решили создать класс, который будет описывать дом (дом по-английски — <b>House</b>). Тогда вам нужно создать класс <b>House</b>, который будет содержаться в файле <b>House.kt</b>.\n" +
        "\n" +
        "<br/><br/>Если же вы решили описать в программе, например, кота (Cat — кот, по-английски), тогда вам нужно создать файл <b>Cat.kt</b> и в нем описать класс Cat и т.д.\n" +
        "\n" +
        "<br/><br/>Внутри файлов содержится текст – код на языке программирования Kotlin. Обычно код класса состоит из имени класса и тела класса. Тело класса помещается в фигурные скобки. Вот как может выглядеть класс House:\n"
val topicKotlin_3_2 ="Метод main()\n" +
        "\n" +
        "<br/><br/>Классы могут содержать переменные и методы, но не обязаны. Могут быть классы без переменных или без методов. И даже без методов и переменных одновременно. Хотя толку от таких классов немного.\n" +
        "\n" +
        "<br/><br/>Минимальная программа должна состоять <b>минимум из одного</b> класса, который должен содержать <b>минимум один</b> метод (функцию), с которого начинается выполнение программы. Такой метод должен иметь имя main.\n" +
        "Минимальная программа выглядит вот так:\n"
val topicKotlin_3_3 =" "



val topicAndroid_1_1 ="Добро пожаловать в раздел по Android Studio!\n" +
        "\n" +
        "<br/><br/>Android Studio - это интегрированная среда разработки для создания приложений под операционную систему Android. В этом разделе мы рассмотрим, как работать в самой среде, и постараемся рассмотреть всю возможную функциональность."
val topicAndroid_1_2 ="Мы изучим, как создавать новые проекты, настраивать их параметры, работать с макетами пользовательского интерфейса, отлаживать приложения и многое другое. Также мы рассмотрим основные инструменты, которые используются в Android Studio, такие как эмуляторы устройств, систему сборки Gradle и инструменты для работы с базами данных."

val topicAndroid_2_1 ="<br/><br/>Запуск Android Studio.\n" +
        "\n" +
        "После полноценной установки Android Studio, нам откроется следующее окно:"
val topicAndroid_2_2 ="В боковом меню мы видим:"
val topicAndroid_2_3 ="В левом боковом меню мы видим, следующие 4 пункта:\n" +
        "\t•\tProjects\n" +
        "\t•\tCustomize\n" +
        "\t•\tPlugins\n" +
        "\t•\tLearn Android Studio\n" +
        "\n" +
        "Давайте рассмотрим каждый пункт более подробнее.\n" +
        "\n" +
        "<br/><br/><b>Projects</b>\n" +
        "\n" +
        "<br/><br/>В разделе “Projects”, мы можем выполнить следующие действия:"
val topicAndroid_2_4 ="\t•\tСоздать новый проект, при нажатии на кнопку “New Project”"
val topicAndroid_2_5 ="\t•\tПри нажатии кнопки “Open”, открывается диалоговое окно, в котором можно выбрать директорию и открыть уже созданный проект."
val topicAndroid_2_6 ="\t•\tПри нажатии на кнопку “Get from VCS” - от англ. Version Control System, это место хранения кода. Самый простой пример это GitHub (Крупнейший веб-сервис для хостинга IT-проектов и их совместной разработки.)"
val topicAndroid_2_7 ="<b>Customize</b>"
val topicAndroid_2_8 ="В данном окне мы можем:\n" +
        "\t•\tВыбрать цветовую тему, android studio (всего их 3: Intellij Light, Darculla, Hight contrasts)\n" +
        "\t•\tВыбрать IDE font, масштабируемость android studio, чтоб можно было настроить размеры окон под каждый экран.\n" +
        "\t•\tKeymap, здесь вы можете изменять горячие клавиши, на те что вам более удобнее использовать (но лучше оставить как есть)\n" +
        "\n" +
        "<br/><br/><b>Plugins</b>"
val topicAndroid_2_9 ="В данном окне мы можем:\n" +
        "\t•\tУстановить дополнительные плагины\n" +
        "\t•\tПросмотреть уже установленные плагины\n" +
        "\t•\tУдалить не нужны плагины"
val topicAndroid_3_1 ="Создание первого проекта\n" +
        "\n" +
        "<br/><br/>Перейдём в боковом меню, на вкладку Project.\n" +
        "\n" +
        "<br/><br/>После нажатия на кнопку <b>New Project</b>, нам откроется следующее окно:"
val topicAndroid_3_2 ="Здесь мы можем выбрать доступные шаблоны, для создания определённого макета, но мы выберем <b>Empty Activity</b>."
val topicAndroid_3_3 ="Далее нажмём на кнопку <b>Next</b>."
val topicAndroid_3_4 ="В данном окне мы можем изменить следующие параметры;\n" +
        "<br/\t•\tName: имя проекта\n" +
        "<br/\t•\tPackage name: имя пакетов проекта, лучше не трогать этот параметр)\n" +
        "<br/\t•\tSave location: директория сохранения проектов, то есть то место где будут создаваться наши проекты\n" +
        "<br/\t•\tLanguage: здесь можно выбрать язык программирования Kotlin или Java, оставляем как есть\n" +
        "<br/\t•\tMinimum SDK: Минимальная версия sdk - это минимальная версия операционной системы Android, необходимая для запуска вашего приложения. Лучше оставить стандартное значение SDK 21.\n" +
        "Если мы изменим, название проекта у нас автоматически поменяются и другие параметры:"
val topicAndroid_3_5 ="После нажатия на кнопки <b>Finish</b>, запуститься процесс создания проекта пустого проекта. После ожидания в пару минут, мы увидим следующее:"
val topicAndroid_3_6 ="Поздравляю, вы создали свой первый проект!"



val topicDesign_1_1 ="Добро пожаловать в раздел по дизайну в Android Studio! \n" +
        "\n" +
        "<br/><br/>В этом разделе мы рассмотрим, что такое дизайн и язык разметки в Android Studio, а также научимся создавать различные элементы интерфейса.\n" +
        "\n" +
        "<br/><br/>Мы также рассмотрим основные принципы дизайна пользовательского интерфейса и как их применять в Android Studio. Вы узнаете, как создавать различные макеты экранов, как добавлять и настраивать элементы управления, такие как кнопки, текстовые поля, изображения и другие.\n"
val topicDesign_1_2 ="В целом, этот раздел поможет вам освоить основы дизайна пользовательского интерфейса в Android Studio и создать красивое и функциональное приложение для вашей аудитории."

val topicDesign_2_1 ="Что такое Xml и зачем он нужен.\n" +
        "\n" +
        "<br/><br/>XML (Extensible Markup Language) - это язык разметки, который используется для хранения и передачи данных. В Android Studio XML-файлы используются для описания пользовательского интерфейса (UI) приложения.\n" +
        "Ниже представлен пример xml-файла, создаваемого автоматически при создании <b>Empty Activity:</b>\n"
val topicDesign_2_2 ="XML-файлы в Android Studio содержат описание компонентов пользовательского интерфейса, таких как кнопки, текстовые поля, изображения и т.д. Они также могут содержать описание стилей и тем, которые используются в приложении.\n" +
        "\n" +
        "<br/><br/>Код выше описывает текстовое поле, в котором написано Hello World!\n" +
        "\n" +
        "<br/><br/>Посмотрим, как он отображается в макете дизайна, что бы открыть окно с дизайном необходимо выбрать пункт <b>Design</b>, расположение пункта указано красной стрелочкой:\n"
val topicDesign_2_3 ="В данном окне мы видим подробную информацию о xml файле, activity_main созданного автоматически.\n" +
        "\n" +
        "<br/><br/>Если мы нажмём на текст, Hello World, мы увидим его отдельные свойства."
val topicDesign_2_4 ="XML-файлы в Android Studio могут быть созданы вручную или с помощью визуального редактора. Они могут быть размещены в различных папках ресурсов, таких как папка layout для описания макетов пользовательского интерфейса, папка values для описания строковых ресурсов, цветов и т.д.\n" +
        "<br/><br/>XML-файлы в Android Studio являются важной частью разработки приложений для Android, так как они определяют, как пользователь будет взаимодействовать с приложением.\n"


val topicDesign_3_1 ="Работа с TextView\n" +
        "\n" +
        "<br/><br/>В созданном автоматически файле, уже имеется 1 TextView, который выглядит так:\n"
val topicDesign_3_2 ="Text View имеет следующие параметры:\n" +
        "<br/>Android:layout_width = “wrap_content”\n" +
        "<br/>Разберем подробнее:\n" +
        "<br/>Слово \"Android\" в данной строке является пространством имен (namespace) и указывает на то, что атрибут layout_height относится к атрибутам, определенным в пространстве имен Android.\n" +
        "\n" +
        "<br/><br/>layout_width – параметр ширины которую будет занимать, наш TextView в макете.\n" +
        "\n" +
        "<br/><br/>wrap_content -  этим параметром мы указываем, что данный элемент будет занимать минимальное необходимое пространство для успешного отображения на экране.\n" +
        "\n" +
        "<br/><br/>Android:layout_height = “match_parent”\n" +
        "\n" +
        "<br/><br/>layout_height – параметр высоты которую будет занимать, наш TextView в макете.\n" +
        "\n" +
        "<br/><br/>match_parent -  этим параметром мы указываем, что данный элемент будет занимать всё доступное пространство.\n" +
        "\n" +
        "<br/><br/>Android:text= “Hello World!”\n" +
        "\n" +
        "<br/><br/>Слово \"text\" в данной строке является атрибутом и определяет текст, который будет отображаться в компоненте пользовательского интерфейса. В данном случае, атрибут text установлен на значение \"Hello World!\", что означает, что в компоненте пользовательского интерфейса будет отображаться текст \"Hello World!\".\n" +
        "\n" +
        "<br/><br/>Атрибут text является одним из наиболее распространенных атрибутов в Android, который используется для установки текста в различных компонентах пользовательского интерфейса, таких как кнопки, метки, текстовые поля и т.д.\n" +
        "\n" +
        "<br/><br/>app:layout_constraintBottom_toBottomOf=\"parent\"\n" +
        "<br/>app:layout_constraintEnd_toEndOf=\"parent\"\n" +
        "<br/>app:layout_constraintStart_toStartOf=\"parent\"\n" +
        "<br/>app:layout_constraintTop_toTopOf=\"parent\"\n" +
        "\n" +
        "<br/><br/>Эти строки являются атрибутами, которые используются для установки ограничений (constraints) на размещение компонентов пользовательского интерфейса в макете в Android Studio.Атрибуты app:layout_constraintBottom_toBottomOf, \n" +
        "<br/>app:layout_constraintEnd_toEndOf,\n" +
        "<br/>app:layout_constraintStart_toStartOf\n" +
        "<br/>app:layout_constraintTop_toTopOf \n" +
        "<br/>устанавливают ограничения на размещение компонента относительно родительского элемента ( в данном случае это сам экран).Конкретно, эти атрибуты устанавливают следующие ограничения: app:layout_constraintBottom_toBottomOf=\"parent\" - устанавливает нижнее ограничение компонента на нижнюю границу родительского элемента.- app:layout_constraintEnd_toEndOf=\"parent\" - устанавливает правое ограничение компонента на правую границу родительского элемента.- app:layout_constraintStart_toStartOf=\"parent\" - устанавливает левое ограничение компонента на левую границу родительского элемента.- app:layout_constraintTop_toTopOf=\"parent\" - устанавливает верхнее ограничение компонента на верхнюю границу родительского элемента.\n" +
        "\n" +
        "<br/><br/>Таким образом, эти атрибуты позволяют установить компонент в центр родительского элемента, занимая всю доступную площадь.\n" +
        "\n" +
        "<br/><br/>Вот как это выглядит в макете:\n"

